<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text for continue

danceAgain = "DANCE AGAIN?"

Quit = "CLOSE PLEASE"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///counts, size and alpha
quitCount = 0;
contCount = 0;
niceTry = 0;

quitSize = 1;
contSize = 1;

quitAlpha = 2;
contAlpha = 2;

hasQuit = true;
hasCont = true;

blink = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make blink stop, create a blank screen
blink = false;
draw_rectangle(0, 0, room_width, room_height, c_black);
room_goto(test_room);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make alpha stop blinking and create Fadeout

blink = false;
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check left or right button press
kContinue = keyboard_check(ord('A'));
kQuit = keyboard_check(vk_right);

if (kContinue and !kQuit)  {
    quitCount = 0;
    niceTry = 0;
    contCount += 1;
    quitSize = 2;
    contSize = 2.5;
}

if (!kContinue and kQuit)   {
    contCount = 0;
    niceTry = 0;
    quitCount += 1; 
    contSize = 2;
    quitSize = 2.5;   
}

if (kContinue and kQuit)   {
    contCount = 0;
    quitCount = 0;
    contSize = 2.5;
    quitSize = 2.5;
    niceTry += 1;
}

if (!kContinue and !kQuit)  {
    contCount = 0;
    quitCount = 0;
    niceTry = 0;
    quitSize = 2;
    contSize = 2;
}

   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// when quit count, restart count and nice try count is room_speed

if (quitCount &gt;= room_speed)    {
    if (quitAlpha == 0 &amp;&amp; blink)
        quitAlpha = 1;
    else if (quitAlpha == 1 &amp;&amp; blink)
        quitAlpha = 0;
        
    if (hasQuit)    {
        alarm[0] = room_speed/3;
    }
    
    hasQuit = false;
}

if (contCount &gt;= room_speed) {
    if (contAlpha == 0 &amp;&amp; blink)
        contAlpha = 1;
    else if (contAlpha == 1 &amp;&amp; blink)
        contAlpha = 0;    
    
    if (hasCont)    {
        alarm[1] = room_speed/3;
    }
    
    hasCont = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw text for continue and quit

//set fonts for these 
draw_set_halign(fa_center);

draw_set_font(font_Kris);

draw_set_color(c_white);

draw_text_ext_transformed_color(room_width*(1/4), room_height*(2/3), danceAgain, -1, -1, contSize, contSize, 0, c_white, c_white, c_white, c_white, contAlpha); 

draw_text_ext_transformed_color(room_width*(3/4), room_height*(2/3), Quit, -1, -1, quitSize, quitSize, 0, c_white, c_white, c_white, c_white, quitAlpha);

draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
